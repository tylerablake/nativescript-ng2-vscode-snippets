{
    // Action Bar
    "{N} ActionBar": {
        "prefix": "nsActionBar",
        "body": [
            "<ActionBar title=\"Title\" class=\"action-bar\">",
            "</ActionBar>"
        ],
        "description": [
            "{N} ActionBar",
            "Properties: ",
            "ðŸ”µtitle: string",
            // "Gets or sets the action bar title.",
            "ðŸ”µtitleView: View",
            // "Gets or sets the title view. When set replaces the title with a custom view",
            "\n"
        ]
    },
    "{N} ActionBar with Action Items": {
        "prefix": "nsActionBarItems",
        "body": [
            "<ActionBar title=\"Title\" class=\"action-bar\">",
            "  <ActionItem (tap)=\"\">",
            "    <Button text=\"Left\" class=\"action-item\"></Button>",
            "  </ActionItem>",
            "  <ActionItem (tap)=\"\" ios.position=\"right\">",
            "    <Button text=\"Right\" class=\"action-item\"></Button>",
            "  </ActionItem>",
            "</ActionBar>"
        ]
    },
    "{N} ActionItem": {
        "prefix": "nsActionItem",
        "body": [
            "<ActionItem (tap)=\"\">",
            "  <Button text=\"Left\" class=\"action-item\"></Button>",
            "</ActionItem>"
        ],
        "description": [
            "{N} ActionItem",
            "Properties: ",
            "ðŸ”µtext: string",
            // "Gets or sets the text of the action item",
            "\nðŸ”µicon: string",
            // "Gets or sets the icon of the action item.",
            // "Supports local images (~/), resources (res: //) and icon fonts (fonts: //)",
            "Values:",
            "ðŸŸ£local images (~/)",
            "ðŸŸ£resources (res: //)",
            "ðŸŸ£icon font (fonts: //)",
            "\nðŸ”µios.position: string",
            // "Sets the position of the item (default value is left)",
            "Values:",
            "ðŸŸ£left",
            "ðŸŸ£right",
            "\nðŸ”µandroid.position: string",
            // "Sets the position of the item (default value is actionBar)",
            "Values:",
            "ðŸŸ£actionBar",
            "ðŸŸ£popup",
            "ðŸŸ£actionBarIfRoom",
            "\nðŸ”µios.systemIcon: number",
            // "Sets the icon of the action item while using UIBarButtonSystemIcon enumeration",
            "ðŸ”µandroid.systemIcon: number",
            // "Sets a path to a resource icon ( see the list of Android system drawables)",
            "\n"
        ]
    },
    "{N} ActionItem Right": {
        "prefix": "nsActionItemRight",
        "body": [
            "<ActionItem (tap)=\"\" ios.position=\"right\">",
            "  <Button text=\"Right\" class=\"action-item\"></Button>",
            "</ActionItem>"
        ],
        "description": [
            "{N} ActionItem Right",
            "Properties: ",
            "ðŸ”µtext: string",
            // "Gets or sets the text of the action item",
            "\nðŸ”µicon: string",
            // "Gets or sets the icon of the action item.",
            // "Supports local images (~/), resources (res: //) and icon fonts (fonts: //)",
            "Values:",
            "ðŸŸ£local images (~/)",
            "ðŸŸ£resources (res: //)",
            "ðŸŸ£icon font (fonts: //)",
            "\nðŸ”µios.position: string",
            // "Sets the position of the item (default value is left)",
            "Values:",
            "ðŸŸ£left",
            "ðŸŸ£right",
            "\nðŸ”µandroid.position: string",
            // "Sets the position of the item (default value is actionBar)",
            "Values:",
            "ðŸŸ£actionBar",
            "ðŸŸ£popup",
            "ðŸŸ£actionBarIfRoom",
            "\nðŸ”µios.systemIcon: number",
            // "Sets the icon of the action item while using UIBarButtonSystemIcon enumeration",
            "ðŸ”µandroid.systemIcon: number",
            // "Sets a path to a resource icon ( see the list of Android system drawables)",
            "\n"
        ]
    },
    "{N} ActionBar Back": {
        "prefix": "nsActionBarBack",
        "body": [
            "<ActionBar title=\"Title\" class=\"action-bar\">",
            "  <NavigationButton text=\"Back\" android.systemIcon=\"ic_menu_back\"></NavigationButton>",
            "</ActionBar>"
        ],
        "description": [
            "{N} ActionBar Back",
            "ActionBar with a back button",
            "\n"
        ]
    },
    "{N} NavigationButton": {
        "prefix": "nsActionBarNavBtn",
        "body": [
            "<NavigationButton text=\"Back\" android.systemIcon=\"ic_menu_back\"></NavigationButton>"
        ],
        "description": [
            "{N} NavigationButton",
            "Creates a NavigationButton",
            "\n Properties: ",
            "ðŸ”µtext: string",
            // "Gets or sets the text of the action item.",
            "ðŸ”µicon: string",
            // "Gets or sets the icon of the action item",
            "\n"
        ]
    },
    "{N} ActionBar Custom Title": {
        "prefix": "nsActionBarCustomTitle",
        "body": [
            "<ActionBar class=\"action-bar\">",
            "  <StackLayout orientation=\"horizontal\"",
            "    ios: horizontalAlignment=\"center\"",
            "    android: horizontalAlignment=\"left\">",
            "    <Label text=\"$1\" class=\"action-title\"></Label>",
            "  </StackLayout>",
            "  <ActionItem (tap)=\"$2\" ios.position=\"right\">",
            "    <Button text=\"Right\" class=\"action-item\"></Button>",
            "  </ActionItem>",
            "</ActionBar>"
        ],
        "description": [
            "{N} ActionBar Custom Title",
            "ActionBar with a custom title",
            "\n"
        ]
    },
    // Platform Specific ActionBar Attributes
    "{N} iOS Icon Rendering Mode": {
        "prefix": "iosIconRenderingMode",
        "body": "iosIconRenderingMode=\"${1|alwaysOriginal,alwaysTemplate,automatic|}\"",
        "description": [
            "{N} iOS Icon Rendering Mode",
            "UIImageRenderingMode of the action bar icons in iOS.",
            "\n Values:",
            "ðŸŸ£alwaysOriginal (default)",
            "ðŸŸ£alwaysTemplate",
            "ðŸŸ£automatic",
            "\n Example:",
            "<ActionBar iosIconRenderingMode=\"alwaysOriginal\"></ActionBar>",
            "\n"
        ]
    },
    "{N} iOS Icon Overflow Safe Area": {
        "prefix": "iosOverflowSafeArea",
        "body": "iosOverflowSafeArea=\"${1|false,true|}\"",
        "description": [
            "{N} iOS Icon Overflow Safe Area",
            "Allow view to expand beyond the safe area on iOS.",
            "\n Values:",
            "ðŸŸ£false (default)",
            "ðŸŸ£true",
            "\n Example:",
            "<ActionBar iosOverflowSafeArea=\"false\"></ActionBar>",
            "\n"
        ]
    },
    "{N} iOS Icon Overflow Safe Area Enabled": {
        "prefix": "iosOverflowSafeAreaEnabled",
        "body": "iosOverflowSafeAreaEnabled=\"${1|true,false|}\"",
        "description": [
            "{N} iOS Icon Overflow Safe Area Enabled",
            "Enables iosOverflowSafeArea for all children on iOS.",
            "\n Values:",
            "ðŸŸ£true (default)",
            "ðŸŸ£false",
            "\n Example:",
            "<ActionBar iosOverflowSafeAreaEnabled=\"true\"></ActionBar>",
            "\n"
        ]
    },
    "{N} iOS ActionItem Position": {
        "prefix": "ios.position",
        "body": "ios.position=\"${1|left,right|}\"",
        "description": [
            "{N} iOS ActionItem Position",
            "Sets the position of the ActionItem on iOS.",
            "\n Values:",
            "ðŸŸ£left (default)",
            "ðŸŸ£right",
            "\n Example:",
            "<ActionItem ios.position=\"left\"></ActionItem>",
            "\n"
        ]
    },
    "{N} Android ActionItem Position": {
        "prefix": "android.position",
        "body": "android.position=\"${1|actionBar,popup,actionBarIfRoom|}\"",
        "description": [
            "{N} Android ActionItem Position",
            "Sets the position of the ActionItem on Android.",
            "\n Values:",
            "ðŸŸ£actionBar (default)",
            "ðŸŸ£popup",
            "ðŸŸ£actionBarIfRoom",
            "\n Example:",
            "<ActionItem android.position=\"actionBar\"></ActionItem>",
            "\n"
        ]
    },
    "{N} iOS ActionItem SystemIcon": {
        "prefix": "ios.systemIcon",
        "body": "ios.systemIcon=\"${1|0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23|}\"",
        "description": [
            "{N} iOS ActionItem SystemIcon",
            "Sets the icon of the action item while using UIBarButtonSystemIcon enumeration.",
            "\n Values:",
            "ðŸŸ£Action - 9",
            "ðŸŸ£Add - 4",
            "ðŸŸ£Bookmarks - 11",
            "ðŸŸ£Camera - 15",
            "ðŸŸ£Cancel - 1",
            "ðŸŸ£Compose - 7",
            "ðŸŸ£Done - 0",
            "ðŸŸ£Edit - 1",
            "ðŸŸ£FastForward - 20",
            "ðŸŸ£FixedSpace - 6",
            "ðŸŸ£FlexibleSpace - 5",
            "ðŸŸ£Organize - 10",
            "ðŸŸ£PageCurl - 23",
            "ðŸŸ£Pause - 18",
            "ðŸŸ£Play - 17",
            "ðŸŸ£Redo - 22",
            "ðŸŸ£Refresh - 13",
            "ðŸŸ£Reply - 8",
            "ðŸŸ£Rewind - 19",
            "ðŸŸ£Save - 3",
            "ðŸŸ£Search - 12",
            "ðŸŸ£Stop - 14",
            "ðŸŸ£Trash - 16",
            "ðŸŸ£Undo - 21",
            "\n Example:",
            "<ActionItem ios.systemIcon=\"1\"></ActionItem>",
            "\n"
        ]
    },
    "{N} Android ActionItem SystemIcon": {
        "prefix": "android.systemIcon",
        "body": "android.systemIcon=\"${1}\"",
        "description": [
            "{N} Android ActionItem SystemIcon",
            "Sets the icon of the action item while using Android Drawables.",
            "\n Values:",
            "Visit https: //developer.android.com/reference/android/R.drawable.html to see supported values.",
            "\n Example:",
            "<ActionItem android.systemIcon=\"ic_menu_add\"></ActionItem>",
            "\n"
        ]
    },
    // Layouts
    "{N} FlexboxLayout": {
        "prefix": "nsFlexbox",
        "body": [
            "<FlexboxLayout>",
            "    $1",
            "</FlexboxLayout>"
        ],
        "description": [
            "{N} FlexboxLayout",
            "\n Properties: ",
            "ðŸ”µflexDirection: string",
            // "Gets or sets a value indicating the direction flex items are placed in the flex container.",
            "Values:",
            "ðŸŸ£row (default)",
            "ðŸŸ£row-reverse",
            "ðŸŸ£column",
            "ðŸŸ£column-reverse",
            "\nðŸ”µflexWrap: string",
            // "Flex items are forced in a single line or can be flowed into multiple lines.",
            "Values:",
            "ðŸŸ£nowrap (default)",
            "ðŸŸ£wrap ",
            "ðŸŸ£wrap-reverse",
            "\nðŸ”µjustifyContent: string",
            // "Alignment along the main axis.",
            "Values:",
            "ðŸŸ£flex-start (default)",
            "ðŸŸ£flex-end",
            "ðŸŸ£center",
            "ðŸŸ£space-between",
            "ðŸŸ£space-around",
            "\nðŸ”µalignItems: string",
            // "Flex items are laid out along the cross axis on the current line.",
            "Values:",
            "ðŸŸ£flex-start",
            "ðŸŸ£flex-end",
            "ðŸŸ£center",
            "ðŸŸ£baseline",
            "ðŸŸ£stretch (default)",
            "\nðŸ”µalignContent: string",
            // "Aligns flex container's lines within it",
            // "Has no effect when flexbox has only a single line.",
            "Values:",
            "ðŸŸ£flex-start",
            "ðŸŸ£flex-end",
            "ðŸŸ£center",
            "ðŸŸ£space-between",
            "ðŸŸ£space-around",
            "ðŸŸ£stretch (default)",
            "\n Events: ",
            "ðŸŸ (loaded)",
            // "Emitted when the view is loaded.",
            "ðŸŸ (unloaded)",
            // "Emitted when the view is unloaded.",
            "ðŸŸ (layoutChanged)",
            // "Emitted when the layout bounds of a view changes.",
            "\n"
        ]
    },
    "{N} FlexboxLayout Column": {
        "prefix": "nsFlexbox-column",
        "body": [
            "<FlexboxLayout flexDirection=\"column\">",
            "    $1",
            "</FlexboxLayout>"
        ],
        "description": [
            "{N} FlexboxLayout",
            "\n Properties: ",
            "ðŸ”µflexDirection: string",
            // "Gets or sets a value indicating the direction flex items are placed in the flex container.",
            "Values:",
            "ðŸŸ£row (default)",
            "ðŸŸ£row-reverse",
            "ðŸŸ£column",
            "ðŸŸ£column-reverse",
            "\nðŸ”µflexWrap: string",
            // "Flex items are forced in a single line or can be flowed into multiple lines.",
            "Values:",
            "ðŸŸ£nowrap (default)",
            "ðŸŸ£wrap ",
            "ðŸŸ£wrap-reverse",
            "\nðŸ”µjustifyContent: string",
            // "Alignment along the main axis.",
            "Values:",
            "ðŸŸ£flex-start (default)",
            "ðŸŸ£flex-end",
            "ðŸŸ£center",
            "ðŸŸ£space-between",
            "ðŸŸ£space-around",
            "\nðŸ”µalignItems: string",
            // "Flex items are laid out along the cross axis on the current line.",
            "Values:",
            "ðŸŸ£flex-start",
            "ðŸŸ£flex-end",
            "ðŸŸ£center",
            "ðŸŸ£baseline",
            "ðŸŸ£stretch (default)",
            "\nðŸ”µalignContent: string",
            // "Aligns flex container's lines within it",
            // "Has no effect when flexbox has only a single line.",
            "Values:",
            "ðŸŸ£flex-start",
            "ðŸŸ£flex-end",
            "ðŸŸ£center",
            "ðŸŸ£space-between",
            "ðŸŸ£space-around",
            "ðŸŸ£stretch (default)",
            "\n Events: ",
            "ðŸŸ (loaded)",
            // "Emitted when the view is loaded.",
            "ðŸŸ (unloaded)",
            // "Emitted when the view is unloaded.",
            "ðŸŸ (layoutChanged)",
            // "Emitted when the layout bounds of a view changes.",
            "\n"
        ]
    },
    "{N} StackLayout": {
        "prefix": "nsStack",
        "body": [
            "<StackLayout>",
            "    $1",
            "</StackLayout>"
        ],
        "description": [
            "{N} StackLayout",
            "A Layout that arranges its children horizontally or vertically.",
            "\n Properties: ",
            "ðŸ”µorientation: string",
            // "Items should be stacked horizontally or vertical.",
            "Values:",
            "ðŸŸ£vertical (default)",
            "ðŸŸ£horizontal",
            "\n Events: ",
            "ðŸŸ (loaded)",
            // "Emitted when the view is loaded.",
            "ðŸŸ (unloaded)",
            // "Emitted when the view is unloaded.",
            "ðŸŸ (layoutChanged)",
            // "Emitted when the layout bounds of a view changes.",
            "\n"
        ]
    },
    "{N} StackLayout Horizontal": {
        "prefix": "nsStack-horizontal",
        "body": [
            "<StackLayout orientation=\"horizontal\">",
            "    $1",
            "</StackLayout>"
        ],
        "description": [
            "{N} StackLayout Horizontal",
            "A Layout that arranges its children horizontally or vertically.",
            "\n Properties: ",
            "ðŸ”µorientation: string",
            // "Items should be stacked horizontally or vertical.",
            "Values:",
            "ðŸŸ£vertical (default)",
            "ðŸŸ£horizontal",
            "\n Events: ",
            "ðŸŸ (loaded)",
            // "Emitted when the view is loaded.",
            "ðŸŸ (unloaded)",
            // "Emitted when the view is unloaded.",
            "ðŸŸ (layoutChanged)",
            // "Emitted when the layout bounds of a view changes.",
            "\n"
        ]
    },
    "{N} WrapLayout": {
        "prefix": "nsWrap",
        "body": [
            "<WrapLayout orientation=\"horizontal\" itemWidth=\"$1\" itemHeight=\"$2\">",
            "    $3",
            "</WrapLayout>"
        ],
        "description": [
            "{N} WrapLayout",
            "\n Properties: ",
            "ðŸ”µorientation: string",
            // "Gets or sets a value indicating the flow direction.",
            "Values:",
            "ðŸŸ£vertical",
            "ðŸŸ£horizontal (default)",
            "\nðŸ”µitemWidth: number",
            // "Gets or sets the width used to measure and layout each child.",
            // "Default value is Number.NaN, which does not restrict children.",
            "ðŸ”µitemHeight: number",
            // "Gets or sets the height used to measure and layout each child.",
            // "Default value is Number.NaN, which does not restrict children.",
            "\n Events: ",
            "ðŸŸ (loaded)",
            // "Emitted when the view is loaded.",
            "ðŸŸ (unloaded)",
            // "Emitted when the view is unloaded.",
            "ðŸŸ (layoutChanged)",
            // "Emitted when the layout bounds of a view changes.",
            "\n"
        ]
    },
    "{N} AbsoluteLayout": {
        "prefix": "nsAbsolute",
        "body": [
            "<AbsoluteLayout>",
            "    <Label text=\"This is Label 1\" top=\"\" left=\"\"></Label>",
            "</AbsoluteLayout>"
        ],
        "description": [
            "{N} AbsoluteLayout",
            "AbsoluteLayout Properties:  None",
            "\n AbsoluteLayout Child Properties: ",
            "ðŸ”µtop: number",
            // "Distance in pixels, between the top edge of the child and the top edge of its parent AbsoluteLayout container.",
            "ðŸ”µleft: number",
            // "Distance in pixels, between the left edge of the child and the left edge of its parent AbsoluteLayout container.",
            "\n Events: ",
            "ðŸŸ (loaded)",
            // "Emitted when the view is loaded.",
            "ðŸŸ (unloaded)",
            // "Emitted when the view is unloaded.",
            "ðŸŸ (layoutChanged)",
            // "Emitted when the layout bounds of a view changes.",
            "\n"
        ]
    },
    "{N} DockLayout": {
        "prefix": "nsDock",
        "body": [
            "<DockLayout stretchLastChild=\"true\">",
            "    <Label dock=\"top\" text=\"I am on top!\"></Label>",
            "</DockLayout>"
        ],
        "description": [
            "{N} DockLayout",
            "\n Properties: ",
            "ðŸ”µstretchLastChild: boolean",
            // "Gets or sets a value that indicates whether the last child element within a DockLayout stretches to fill the remaining available space.",
            "Values:",
            "ðŸŸ£true (default)",
            "ðŸŸ£false",
            "\n Events: ",
            "ðŸŸ (loaded)",
            // "Emitted when the view is loaded.",
            "ðŸŸ (unloaded)",
            // "Emitted when the view is unloaded.",
            "ðŸŸ (layoutChanged)",
            // "Emitted when the layout bounds of a view changes.",
            "\n"
        ]
    },
    "{N} GridLayout": {
        "prefix": "nsGrid",
        "body": [
            "<GridLayout rows=\"$1\" columns=\"$2\">",
            "    $3",
            "</GridLayout>"
        ],
        "description": [
            "{N} GridLayout",
            "Creates a GridLayout container. Each value in columns list is a new column. Same with rows.",
            "\n Columns & Rows Values:",
            "ðŸŸ£* - Takes up the rest of available space",
            "ðŸŸ£auto - Takes up only required space",
            "ðŸŸ£explicit:  number - Takes up space allocated. Can be any number.",
            "\n Events",
            "ðŸŸ (loaded)",
            // "Emitted when the view is loaded.",
            "ðŸŸ (unloaded)",
            // "Emitted when the view is unloaded.",
            "ðŸŸ (layoutChanged)",
            // "Emitted when the layout bounds of a view changes.",
            "\n Example:",
            "<GridLayout columns=\"*,auto,20\" rows=\"*,auto,20\">",
            "</GridLayout>",
            "\n"
        ]
    },
    // Views
    "{N} ScrollView": {
        "prefix": "nsScrollView",
        "body": [
            "<ScrollView orientation=\"${1|vertical,horizontal|}\">",
            "</ScrollView>"
        ],
        "description": [
            "{N} ScrollView",
            "\n Properties: ",
            "ðŸ”µorientation: string",
            // "Sets scroll direction.",
            "Values:",
            "ðŸŸ£vertical (default)",
            "ðŸŸ£horizontal",
            "\n Events: ",
            "ðŸŸ (scroll)",
            // "Emitted when the component is scrolled.",
            "\n Native Components: ",
            "NativeScript specific implementation",
            "\n"
        ]
    },
    "{N} ListView": {
        "prefix": "nsListView",
        "body": [
            "<ListView [items]=\"source\" (loaded)=\"onLoaded($event)\" (itemLoading)=\"onItemLoading($event)\" (itemTap)=\"onItemTap($event)\" class=\"list-group\" separatorColor=\"#E5E5EA\">",
            "    <ng-template let-item=\"item\" let-odd=\"odd\" let-even=\"even\">",
            "      <StackLayout>",
            "        <Label [text]=\"item.title\" class=\"list-group-item\"></Label>",
            "        $1",
            "      </StackLayout>",
            "    </ng-template>",
            "</ListView>"
        ],
        "description": [
            "{N} ListView",
            "\n Properties: ",
            "ðŸ”µtext: string",
            // "Gets or sets the text of the action item",
            "ðŸ”µitems: Array<any> | ItemsSource",
            // "Gets or set the items collection of the ListView.",
            // "The items property can be set to an array or an object defining length and getItem(index) method.",
            "ðŸ”µitemTemplateSelector: function",
            // "A function that returns the appropriate ket template based on the data item.",
            "ðŸ”µitemTemplates: Array<KeyedTemplate>",
            // "Gets or set the list of item templates for the item template selector.",
            "ðŸ”µseparatorColor: string | Color",
            // "Gets or set the items separator line color of the ListView.",
            "ðŸ”µrowHeight: Length",
            // "Gets or set row height of the ListView.",
            "ðŸ”µiosEstimatedRowHeight: Length",
            // "Gets or set the estimated height of rows in the ListView.",
            // "Default value:  44px.",
            "\n Methods: ",
            "ðŸŸ¢refresh()",
            // "Forces the ListView to reload all its items.",
            "ðŸŸ¢scrollToIndex(index:  number)",
            // "Scrolls the specified item with index into view.",
            "ðŸŸ¢scrollToIndexAnimated(index:  number)",
            // "Scrolls the specified item with index into view with animation.",
            "ðŸŸ¢isItemAtIndexVisible(index:  number):  boolean",
            // "Checks if specified item with index is visible.",
            "\n Events: ",
            "ðŸŸ (itemLoading)",
            // "Emitted when a View for the data at the specified index should be created.",
            "ðŸŸ (itemTap)",
            // "Emitted when a ListView item is tapped.",
            "ðŸŸ (loadMoreItems)",
            // "Emitted when the ListView is scrolled so that its last item is visible.",
            "\n Native Components: ",
            "iOS - UITableView",
            "Android - android.widget.ListView",
            "\n"
        ]
    },
    "{N} TabView": {
        "prefix": "nsTabView",
        "body": [
            "<TabView selectedTabTextColor=\"black\" tabTextColor=\"gray\" tabBackgroundColor=\"lightgray\" androidSelectedTabHighlightColor=\"black\">",
            "<StackLayout *tabItem=\"{title:  'First Tab', iconSource:  'res: //icon', textTransform:  'lowercase'}\" >",
            "<Label text=\"Tab 1 Content\"></Label>",
            "</StackLayout>",
            "<StackLayout *tabItem=\"{title:  'Second Tab', iconSource:  'res: //icon', textTransform:  'lowercase'}\" >",
            "<Label text=\"Tab 2 Content\"></Label>",
            "</StackLayout>",
            "</TabView>"
        ],
        "description": [
            "{N} TabView",
            "\n Properties: ",
            "ðŸ”µandroidOffscreenTabLimit: number",
            // "Gets or sets the number of tabs that should be retained to either side of the current tab in the view hierarchy in an idle state.",
            "ðŸ”µandroidSelectedTabHighlightColor: Color",
            // "Gets or sets the color of the horizontal line drawn below the currently selected tab on Android.",
            "ðŸ”µiosIconRenderingMode: Enum",
            // "Gets or sets the icon rendering mode on iOS.",
            "ðŸ”µitems: Array<TabViewItem>",
            // "Gets or sets the items of the TabView.",
            "ðŸ”µselectedIndex: number",
            // "Gets or sets the selectedIndex of the TabView.",
            "ðŸ”µselectedTabTextColor: Color",
            // "Gets or sets the text color of the selected tab title.",
            "ðŸ”µtabBackgroundColor: Color",
            // "Gets or sets the background color of the tabs.",
            "ðŸ”µtabTextColor: Color",
            // "Gets or sets the font size of the tabs titles.",
            "ðŸ”µtabTextFontSize: number",
            // "Gets or sets the font size of the tabs titles.",
            "\n Events: ",
            "ðŸŸ (selectedIndexChanged)",
            // "Emitted when the selectedIndex property is changed.",
            "\n Native Components: ",
            "iOS - UITabBarController",
            "Android - androidx.viewpager.widget.ViewPager",
            "\n"
        ]
    },
    "{N} WebView": {
        "prefix": "nsWebView",
        "body": [
            "<WebView src\"${1}\" (loaded)=\"onWebViewLoaded()\"  (touch)=\"webViewTouch()\" (pan)=\"webViewPan()\"></WebView>"
        ],
        "description": [
            "{N} WebView",
            "\n Properties: ",
            "ðŸ”µsrc: string",
            // "Supports url, local file path,or HTML string.",
            "Values:",
            "ðŸŸ£local images (~/)",
            "ðŸŸ£resources (res: //)",
            "ðŸŸ£icon font (fonts: //)",
            "\n Methods: ",
            "ðŸŸ¢reload():  void",
            // "Reloads the WebView forcing updating of the content.",
            "\n Events: ",
            "ðŸŸ (loadStarted)",
            // "Emitted when the content is starting to load.",
            "ðŸŸ (loadFinished)",
            // "Emitted when the content loading is over.",
            "ðŸŸ (touch)",
            // "Emitted when the view is touched.",
            "ðŸŸ (pan)",
            // "Emitted when the view is panned.",
            "\n Native Components: ",
            "iOS - WKWebView",
            "Android - android.webkit.WebView",
            "\n"
        ]
    },
    // Widgets
    "{N} Image": {
        "prefix": "nsImg",
        "body": "<Image src=\"${1|http: //,res: //,~/,fonts: //|}\"></Image>",
        "description": [
            "{N} Image",
            "Shows an image.",
            "\n Values: ",
            // "- http: // (url)",
            // "- res: // (resources)",
            // "- ~/ (local images)",
            // "- fonts: // (fonts)",
            "ðŸŸ£url (http: //)",
            "ðŸŸ£local images (~/)",
            "ðŸŸ£resources (res: //)",
            "ðŸŸ£icon font (fonts: //)",
            "\n Example:",
            "<Image src=\"res: //logo_white_bg\"></Image>",
            "\n"
        ]
    },
    "{N} Label": {
        "prefix": "nsLabel",
        "body": [
            "<Label text=\"$1\" textWrap=\"true\"></Label>",
            "$2"
        ]
    },
    "{N} Button": {
        "prefix": "nsBtn",
        "body": [
            "<Button text=\"$1\" (tap)=\"$2\"></Button>",
            "$3"
        ]
    },
    "{N} TextField": {
        "prefix": "nsTextField",
        "body": [
            "<TextField hint=\"$1\"",
            "[text]=\"$2\"",
            "secure=\"false\"",
            "editable=\"true\"",
            "keyboardType=\"number\"",
            "returnKeyType=\"done\"",
            "autocorrect=\"false\"",
            "maxLength=\"20\"",
            "(focus)=\"onFocus($event)\"",
            "(blur)=\"onBlur($event)\">",
            "(returnPress)=\"onReturnPress($event)\"",
            "</TextField>",
            "$3"
        ],
        "description": [
            "{N} TextField",
            "\n Properties: ",
            "ðŸ”µtext: string",
            // "Gets or sets the text.",
            "ðŸ”µhint: string",
            // "Gets or sets the text hint.",
            "ðŸ”µautocapitalizationType: string",
            // "Gets or sets the autocapitalization type.",
            "ðŸ”µautocorrect: boolean",
            // "Enables or disables autocorrection.",
            "ðŸ”µkeyboardType: string",
            // "Gets or sets the soft keyboard type.",
            "ðŸ”µletterSpacing: number",
            // "Gets or sets letter space style property.",
            "ðŸ”µlineHeight: number",
            // "Gets or sets line height style property.",
            "ðŸ”µmaxLength: number",
            // "Gets or sets the max number of symbols allowed as input.",
            "ðŸ”µreturnKeyType: string",
            // "Gets or sets the soft keyboard return key flavor.",
            "ðŸ”µeditable: boolean",
            // "Gets or sets if the text field is editable.",
            "ðŸ”µtextAlignment: string",
            // "Gets or sets the text alignment.",
            "ðŸ”µtextDecoration: string",
            // "Gets or sets the text decoration.",
            "ðŸ”µtextTransform: string",
            // "Gets or sets the text transform.",
            "ðŸ”µwhiteSpace: string",
            // "Gets or sets the text whitespace.",
            "\n Methods: ",
            "ðŸŸ¢focus(): boolean",
            // "Tries to focus the view. Returns a boolean indicating if a descendant took focus.",
            "ðŸŸ¢dismissSoftInput(): void",
            // "Hides the soft input method, ususally a soft keyboard.",
            "\n Events: ",
            "ðŸŸ (blur)",
            // "Emitted when the text field is unfocused.",
            "ðŸŸ (focus)",
            // "Emitted when the text field is focused.",
            "ðŸŸ (returnPress)",
            // "Emitted when the return key is tapped.",
            "ðŸŸ (textChange)",
            // "Emitted when there is a new text input.",
            "\n Native Components: ",
            "iOS - UITextField",
            "Android - android.widget.EditText",
            "\n"
        ]
    },
    "{N} Password Field": {
        "prefix": "nsPassword",
        "body": [
            "<TextField hint=\"Enter your password.\" text=\"$1\" secure=\"true\"></TextField>",
            "$2"
        ]
    },
    "{N} Editable TextView": {
        "prefix": "nsTextView-editable",
        "body": [
            "<TextView hint=\"$1\"",
            "[text]=\"$2\"",
            "editable=\"true\"",
            "keyboardType=\"number\"",
            "returnKeyType=\"done\"",
            "autocorrect=\"false\"",
            "(focus)=\"onFocus($event)\"",
            "(blur)=\"onBlur($event)\">",
            "</TextView>",
            "$3"
        ],
        "description": [
            "{N} Editable TextView",
            "\n Properties: ",
            "ðŸ”µtext: string",
            // "Gets or sets the text.",
            "ðŸ”µhint: string",
            // "Gets or sets the text hint.",
            "ðŸ”µautocapitalizationType: string",
            // "Gets or sets the autocapitalization type.",
            "ðŸ”µautocorrect: boolean",
            // "Enables or disables autocorrection.",
            "ðŸ”µkeyboardType: string",
            // "Gets or sets the soft keyboard type.",
            "ðŸ”µletterSpacing: number",
            // "Gets or sets letter space style property.",
            "ðŸ”µlineHeight: number",
            // "Gets or sets line height style property.",
            "ðŸ”µmaxLength: number",
            // "Gets or sets the max number of symbols allowed as input.",
            "ðŸ”µreturnKeyType: string",
            // "Gets or sets the soft keyboard return key flavor.",
            "ðŸ”µeditable: boolean",
            // "Gets or sets if the text field is editable.",
            "ðŸ”µtextAlignment: string",
            // "Gets or sets the text alignment.",
            "ðŸ”µtextDecoration: string",
            // "Gets or sets the text decoration.",
            "ðŸ”µtextTransform: string",
            // "Gets or sets the text transform.",
            "ðŸ”µwhiteSpace: string",
            // "Gets or sets the text whitespace.",
            "\n Methods: ",
            "ðŸŸ¢focus(): boolean",
            // "Tries to focus the view. Returns a boolean indicating if a descendant took focus.",
            "ðŸŸ¢dismissSoftInput(): void",
            // "Hides the soft input method, ususally a soft keyboard.",
            "\n Events: ",
            "ðŸŸ (blur)",
            // "Emitted when the text field is unfocused.",
            "ðŸŸ (focus)",
            // "Emitted when the text field is focused.",
            "ðŸŸ (textChange)",
            // "Emitted when there is a new text input.",
            "\n Native Components: ",
            "iOS - UITextView",
            "Android - android.widget.EditText",
            "\n"
        ]
    },
    "{N} Non-Editable TextView": {
        "prefix": "nsTextView-non-editable",
        "body": [
            "<TextView hint=\"$1\"",
            "[text]=\"$2\"",
            "editable=\"false\"",
            "keyboardType=\"number\"",
            "returnKeyType=\"done\"",
            "autocorrect=\"false\"",
            "(focus)=\"onFocus($event)\"",
            "(blur)=\"onBlur($event)\">",
            "</TextView>",
            "$3"
        ],
        "description": [
            "{N} Non-Editable TextView",
            "\n Properties: ",
            "ðŸ”µtext: string",
            // "Gets or sets the text.",
            "ðŸ”µhint: string",
            // "Gets or sets the text hint.",
            "ðŸ”µautocapitalizationType: string",
            // "Gets or sets the autocapitalization type.",
            "ðŸ”µautocorrect: boolean",
            // "Enables or disables autocorrection.",
            "ðŸ”µkeyboardType: string",
            // "Gets or sets the soft keyboard type.",
            "ðŸ”µletterSpacing: number",
            // "Gets or sets letter space style property.",
            "ðŸ”µlineHeight: number",
            // "Gets or sets line height style property.",
            "ðŸ”µmaxLength: number",
            // "Gets or sets the max number of symbols allowed as input.",
            "ðŸ”µreturnKeyType: string",
            // "Gets or sets the soft keyboard return key flavor.",
            "ðŸ”µeditable: boolean",
            // "Gets or sets if the text field is editable.",
            "ðŸ”µtextAlignment: string",
            // "Gets or sets the text alignment.",
            "ðŸ”µtextDecoration: string",
            // "Gets or sets the text decoration.",
            "ðŸ”µtextTransform: string",
            // "Gets or sets the text transform.",
            "ðŸ”µwhiteSpace: string",
            // "Gets or sets the text whitespace.",
            "\n Methods: ",
            "ðŸŸ¢focus(): boolean",
            // "Tries to focus the view. Returns a boolean indicating if a descendant took focus.",
            "ðŸŸ¢dismissSoftInput(): void",
            // "Hides the soft input method, ususally a soft keyboard.",
            "\n Events: ",
            "ðŸŸ (blur)",
            // "Emitted when the text field is unfocused.",
            "ðŸŸ (focus)",
            // "Emitted when the text field is focused.",
            "ðŸŸ (textChange)",
            // "Emitted when there is a new text input.",
            "\n Native Components: ",
            "iOS - UITextView",
            "Android - android.widget.EditText",
            "\n"
        ]
    },
    "{N} SearchBar": {
        "prefix": "nsSearchBar",
        "body": [
            "<SearchBar hint=\"$1\"",
            "[text]=\"$2\" (textChange)=\"onTextChanged($event)\"",
            "(clear)=\"onClear($event)\" (submit)=\"onSubmit($event)\">",
            "$3"
        ],
        "description": [
            "{N} SearchBar",
            "\n Properties: ",
            "ðŸ”µhint: string",
            // "Gets or sets the text of the search bar text field hint/placeholder.",
            "ðŸ”µtext: string",
            // "Gets or sets a search bar text.",
            "\n Events: ",
            "ðŸŸ (textChange)",
            // "Emitted when the text is changed.",
            "ðŸŸ (clear)",
            // "Emitted when the search is cleared (via the clear button).",
            "ðŸŸ (submit)",
            // "Emitted when the serach term is submitted.",
            "\n Native Components: ",
            "iOS - UISearchBar",
            "Android - android.widget.SearchView",
            "\n"
        ]
    },
    "{N} Switch": {
        "prefix": "nsSwitch",
        "body": [
            "<Switch [checked]=\"$1\" (checkedChange)=\"onCheckedChange($event)\" class=\"switch\"></Switch>",
            "$2"
        ],
        "description": [
            "{N} Switch",
            "\n Properties: ",
            "ðŸ”µchecked: boolean",
            // "Gets or sets if a switch is checked or not.",
            "\n Events: ",
            "ðŸŸ (checkedChange)",
            // "Emitted when the value is changed.",
            "\n Native Components: ",
            "iOS - UISwitch",
            "Android - android.widget.Switch",
            "\n"
        ]
    },
    "{N} ProgressBar": {
        "prefix": "nsProgress",
        "body": [
            "<Progress [value]=\"$1\" [maxValue]=\"$2\" (valueChanged)=\"onValueChanged($event)\" class=\"progress\"></Progress>"
        ],
        "description": [
            "{N} ProgressBar",
            "\n Properties: ",
            "ðŸ”µvalue: number",
            // "Gets or sets a progress current value.",
            "ðŸ”µmaxValue: number",
            // "Gets or sets a progress max value.",
            "\n Events: ",
            "ðŸŸ (valueChange)",
            // "Emitted when the value is changed.",
            "\n Native Components: ",
            "iOS - UIProgressView",
            "Android - android.widget.ProgressBar",
            "\n"
        ]
    },
    "{N} Slider": {
        "prefix": "nsSlider",
        "body": [
            "<Slider [minValue]=\"$1\" [maxValue]=\"$2\" [value]=\"$3\" class=\"slider\"></Slider>",
            "$4"
        ],
        "description": [
            "{N} Slider",
            "\n Properties: ",
            "ðŸ”µvalue: number",
            // "Gets or sets the slider value.",
            "ðŸ”µminValue: number",
            // "Gets or sets the slider min value.",
            "ðŸ”µmaxValue: number",
            // "Gets or sets the slider max value.",
            "\n Events: ",
            "ðŸŸ (valueChange)",
            // "Emitted when the slider value is changed.",
            "\n Native Components: ",
            "iOS - UISlider",
            "Android - android.widget.SeekBar",
            "\n"
        ]
    },
    "{N} DatePicker": {
        "prefix": "nsDate",
        "body": [
            "<DatePicker [day]=\"$1\" [month]=\"$2\" [year]=\"$3\">",
            "[maxDate]=\"maxDate\" (dateChange)=\"onDateChanged($event)\"",
            "(dayChange)=\"onDayChanged($event)\"",
            "(monthChange)=\"onMonthChanged($event)\"",
            "(yearChange)=\"onYearChanged($event)\"",
            "(loaded)=\"onDatePickerLoaded($event)\"",
            "</DatePicker>",
            "$4"
        ],
        "description": [
            "{N} DatePicker",
            "\n Properties: ",
            "ðŸ”µdate: Date",
            // "Gets or sets the entire date as Date object.",
            "ðŸ”µminDate: Date",
            // "Gets or sets the min date.",
            "ðŸ”µmaxDate: Date",
            // "Gets or sets the max date.",
            "ðŸ”µday: number",
            // "Gets or sets the day. The days start at 1.",
            "ðŸ”µmonth: number",
            // "Gets or sets the month. The months start at 1.",
            "ðŸ”µyear: number",
            // "Gets or sets the year.",
            "\n Events: ",
            "ðŸŸ (dateChange)",
            // "Emitted when the date property is changed.",
            "ðŸŸ (dayChange)",
            // "Emitted when the day property is changed.",
            "ðŸŸ (monthChange)",
            // "Emitted when the month property is changed.",
            "ðŸŸ (yearChange)",
            // "Emitted when the year property is changed.",
            "\n Native Components: ",
            "iOS - UIDatePicker",
            "Android - android.widget.DatePicker",
            "\n"
        ]
    },
    "{N} TimePicker": {
        "prefix": "nsTime",
        "body": [
            "<TimePicker [hour]=\"$1\" [minute]=\"$2\" maxHour=\"$3\"",
            " maxMinute=\"$4\" minuteInterval=\"$5\" (minuteChange)=\"onMinuteChanged($event)\" ",
            "(hourChange)=\"onHourChanged($event)\" (timeChange)=\"onTimeChanged($event)\"></TimePicker>"
        ],
        "description": [
            "{N} TimePicker",
            "\n Properties: ",
            "ðŸ”µminute: number",
            // "Gets or sets the time minute.",
            "ðŸ”µhour: number",
            // "Gets or sets the time hour.",
            "ðŸ”µminMinute: number",
            // "Gets or sets the min time minute.",
            "ðŸ”µmaxMinute: number",
            // "Gets or sets the max time minute.",
            "ðŸ”µminHour: number",
            // "Gets or sets the min time hour.",
            "ðŸ”µmaxHour: number",
            // "Gets or sets the max time hour.",
            "ðŸ”µminuteInterval: number",
            // "Gets or sets the minute interval.",
            "ðŸ”µtime: number",
            // "Gets or sets the time while passing a Date object (use it instaed hour and minute).",
            "\n Events: ",
            "ðŸŸ (minuteChange)",
            // "Emitted when the minute property is changed.",
            "ðŸŸ (hourChange)",
            // "Emitted when the hour property is changed.",
            "ðŸŸ (timeChange)",
            // "Emitted when the hour, minute or time property is changed.",
            "\n Native Components: ",
            "iOS - UIDatePicker",
            "Android - android.widget.TimePicker",
            "\n"
        ]
    },
    "{N} ListPicker": {
        "prefix": "nsListPicker",
        "body": [
            "<ListPicker [items]=\"$1\" [(ngModel)]=\"$2\"></ListPicker>"
        ],
        "description": [
            "{N} ListPicker",
            "\n Properties: ",
            "ðŸ”µitems: Array<any> | ItemsSource",
            // "Gets or set the items collection of the ListPicker.",
            // "The items property can be set to an array or an object defining length and getItem(index) method.",
            "ðŸ”µselectedIndex: number",
            // "Gets or set the index of the selected ListPicker item.",
            "\n Events: ",
            "ðŸŸ (selectedIndexChange)",
            // "Emitted when the selectedIndex is changed.",
            "\n Native Components: ",
            "iOS - UIPickerView",
            "Android - android.widget.NumberPicker",
            "\n"
        ]
    },
    "{N} ActivityIndicator": {
        "prefix": "nsLoading",
        "body": [
            "<ActivityIndicator width=\"100\" height=\"100\" [busy]=\"$1\" (busyChange)=\"onBusyChanged($event)\" class=\"activity-indicator\"></ActivityIndicator>",
            "$2"
        ],
        "description": [
            "{N} ActivityIndicator",
            "Properties: ",
            "ðŸ”µbusy: boolean",
            // "Gets or sets a value indicating whether the widget is currently displaying progress.",            
            "\n"
        ]
    },
    "{N} SegmentedBar": {
        "prefix": "nsSegmentedBar",
        "body": [
            "<SegmentedBar [items]=\"$1\"",
            "selectedIndex=\"0\" (selectedIndexChange)=\"onSelectedIndexChange(event)\">",
            "</SegmentedBar>"
        ],
        "description": [
            "{N} SegmentedBar",
            "\n Properties: ",
            "ðŸ”µselectedIndex: number",
            // "Gets or sets the selected index.",
            "ðŸ”µitems: Array<SegmentedBarItem>",
            // "Gets or sets the items.",
            "ðŸ”µselectedBackgroundColor: Color",
            // "Gets or sets the selected background color.",
            "\n Events: ",
            "ðŸŸ (selectedIndexChange)",
            // "Emitted when the selectedIndex is changed.",
            "\n Native Components: ",
            "iOS - UISegmentedControl",
            "Android - android.widget.TabHost",
            "\n"
        ]
    },
    "{N} Border": {
        "prefix": "nsBorder",
        "body": [
            "borderColor=\"${1|red,blue,green,orange,brown,black,yellow,white|}\" borderWidth=\"2\""
        ],
        "description": [
            "{N} Border",
            "Apply a colored border",
            "\n Tip:  This is helpful for debugging layout issues. : )",
            "\n"
        ]
    },
    // Events
    "{N} Loaded Event": {
        "prefix": "nsLoaded",
        "body": "(loaded)=\"$1\"",
        "description": [
            "{N} Loaded Event",
            "Emitted when the view is loaded.",
            "\n"
        ]
    },
    "{N} Unloaded Event": {
        "prefix": "nsUnloaded",
        "body": "(unloaded)=\"$1\"",
        "description": [
            "{N} Unloaded Event",
            "Emitted when the view is unloaded.",
            "\n"
        ]
    },
    "{N} LayoutChanged Event": {
        "prefix": "nsLayoutChanged",
        "body": "(layoutChanged)=\"$1\"",
        "description": [
            "{N} LayoutChanged Event",
            "Emitted when the layout bounds of a view changes due to layout processing.",
            "\n"
        ]
    },
    "{N} BusyChanged Event": {
        "prefix": "nsBusyChanged",
        "body": "(busyChanged)=\"$1\"",
        "description": [
            "{N} BusyChanged Event",
            "Emitted when the ActivityIndicator busy property is changed.",
            "\n"
        ]
    },
    "{N} SelectedIndexChanged Event": {
        "prefix": "nsSelectedIndexChanged",
        "body": "(selectedIndexChanged)=\"$1\"",
        "description": [
            "{N} SelectedIndexChanged Event",
            "Emitted when the selectedIndex property is changed.",
            "\n"
        ]
    },
    // Attributes
    "{N} CSS Class Attribute": {
        "prefix": "css",
        "body": "class=\"$1\"$2"
    },
    "{N} Text Attribute": {
        "prefix": "text",
        "body": "text=\"$1\"$2"
    },
    "{N} Text Binding Attribute": {
        "prefix": "textBinding",
        "body": "[text]=\"$1\"$2"
    },
    "{N} Icon Attribute": {
        "prefix": "icon",
        "body": "icon=\"${1|res: //,~/,fonts: //|}\"",
        "description": [
            "{N} Icon Attribute",
            "Sets the icon of the action item",
            "\n Values: ",
            "ðŸŸ£local images (~/)",
            "ðŸŸ£resources (res: //)",
            "ðŸŸ£icon font (fonts: //)",
            "\n Example:",
            "<ActionItem icon=\"res: //ic_add\"></ActionItem>",
            "\n"
        ]
    },
    "{N} Tap Attribute": {
        "prefix": "tap",
        "body": "(tap)=\"$1\"$2"
    },
    "{N} TextWrap Attribute": {
        "prefix": "wrap",
        "body": "textWrap=\"${1|true,false|}\"",
        "description": [
            "{N} TextWrap Attribute",
            // "Gets or sets the text wrap.",
            "\n Values:",
            "ðŸŸ£false (default)",
            "ðŸŸ£true",
            "\n Example:",
            "<Label textWrap=\"false\"></Label>",
            "\n"
        ]
    },
    "{N} HorizontalAlignment Attribute": {
        "prefix": "halign",
        "body": "horizontalAlignment=\"${1|center,left,right,stretch|}\"",
        "description": [
            "{N} HorizontalAlignment Attribute",
            // "HorizontalAlignment indicates where an element should be displayed on the horizontal axis relative to the allocated layout slot of the parent element.",
            "\n Values:",
            "ðŸŸ£stretch (default)",
            "ðŸŸ£center",
            "ðŸŸ£left",
            "ðŸŸ£right",
            "\n Example:",
            "<Label horizontalAlignment=\"center\"></Label>",
            "\n"
        ]
    },
    "{N} VerticalAlignment Attribute": {
        "prefix": "valign",
        "body": "verticalAlignment=\"${1|center,top,middle,bottom,stretch|}\"",
        "description": [
            "{N} VerticalAlignment Attribute",
            // "VerticalAlignment indicates where an element should be displayed on the horizontal axis relative to the allocated layout slot of the parent element.",
            "\n Values:",
            "ðŸŸ£stretch (default)",
            "ðŸŸ£top",
            "ðŸŸ£center",
            "ðŸŸ£middle",
            "ðŸŸ£bottom",
            "\n Example:",
            "<Label verticalAlignment=\"center\"></Label>",
            "\n"
        ]
    },
    "{N} Visibility Attribute": {
        "prefix": "visibility",
        "body": "visibility=\"${1|visible,collapsed,hidden|}\"",
        "description": [
            "{N} Visibility Attribute",
            // "Sets the view visibility.",
            "\n Values:",
            "ðŸŸ£visible (default)",
            "ðŸŸ£collapsed",
            "ðŸŸ£hidden",
            "\n Example:",
            "<Label visibility=\"hidden\"></Label>",
            "\n"
        ]
    },
    "{N} Visibility Binding": {
        "prefix": "visibilityBinding",
        "body": "[visibility]=\"isItemVisible ? 'visible' :  'collapsed'\"",
        "description": [
            "{N} Visibility Binding",
            // "Bind to the view's visibility.",
            "\n Values:",
            "ðŸŸ£visible (default)",
            "ðŸŸ£collapsed",
            "ðŸŸ£hidden",
            "\n Example:",
            "<Label [visibility]=\"isItemVisible ? 'visible' :  'collapsed'\"></Label>",
            "\n"
        ]
    },
    "{N} Stretch Attribute": {
        "prefix": "stretch",
        "body": "stretch=\"${1|aspectFit,none,fill,aspectFill|}\"",
        "description": [
            "{N} Stretch Attribute",
            "Image stretch mode.",
            "\n Values:",
            "ðŸŸ£aspectFit (default)",
            "ðŸŸ£none",
            "ðŸŸ£fill",
            "ðŸŸ£aspectFill",
            "\n Example:",
            "<Image stretch=\"aspectFit\"></Image>",
            "\n"
        ]
    },
    "{N} KeyboardType Attribute": {
        "prefix": [
            "kbType",
            "keyboardType"
        ],
        "body": "keyboardType=\"${1|number,email,phone,integer,datetime,url|}\"",
        "description": [
            "{N} KeyboardType Attribute",
            // "Keyboard type for a text input.",
            "(NOTE: Text input only)",
            "\n Values:",
            "ðŸŸ£number",
            "ðŸŸ£email",
            "ðŸŸ£phone",
            "ðŸŸ£integer",
            "ðŸŸ£datetime",
            "ðŸŸ£url",
            "\n Example:",
            "<TextField keyboardType=\"number\"></TextField>",
            "\n"
        ]
    },
    "{N} Row Attribute": {
        "prefix": "row",
        "body": "row=\"$1\""
    },
    "{N} Column Attribute": {
        "prefix": "col",
        "body": "col=\"$1\""
    },
    "{N} Colspan Attribute": {
        "prefix": "colSpan",
        "body": "colSpan=\"$1\""
    },
    "{N} Rowspan Attribute": {
        "prefix": "rowSpan",
        "body": "rowSpan=\"$1\""
    },
    "{N} Width Attribute": {
        "prefix": "width",
        "body": "width=\"$1\""
    },
    "{N} Height Attribute": {
        "prefix": "height",
        "body": "height=\"$1\""
    },
    "{N} Dock Attribute": {
        "prefix": "dock",
        "body": "dock=\"${1|top,left,right,bottom|}\"",
        "description": [
            "{N} Dock Attribute",
            "Sets how the child view should dock to the parent DockLayout container.",
            "\n Values:",
            "ðŸŸ£top",
            "ðŸŸ£left",
            "ðŸŸ£right",
            "ðŸŸ£bottom",
            "\n Example:",
            "<DockLayout>",
            "<Label dock=\"bottom\"></Label>",
            "</DockLayout>",
            "\n"
        ]
    },
    "{N} TextTransform Attribute": {
        "prefix": "textTransform",
        "body": "textTransform=\"${1|none,capitalize,uppercase,lowercase|}\"",
        "description": [
            "{N} TextTransform Attribute",
            // "Sets how text should be transformed",
            "\n Values:",
            "ðŸŸ£none (default)",
            "ðŸŸ£capitalize",
            "ðŸŸ£uppercase",
            "ðŸŸ£lowercase",
            "\n Example:",
            "<Label textTransform=\"lowercase\"></Label>",
            "\n"
        ]
    },
    "{N} TextDecoration Attribute": {
        "prefix": "textDecoration",
        "body": "textDecoration=\"${1|none,underline,line-through|}\"",
        "description": [
            "{N} TextDecoration Attribute",
            "\n Values:",
            "ðŸŸ£none (default)",
            "ðŸŸ£underline",
            "ðŸŸ£line-through",
            "\n Example:",
            "<Label textDecoration=\"underline\"></Label>",
            "\n"
        ]
    },
    "{N} TextAlignment Attribute": {
        "prefix": "textAlignment",
        "body": "textAlignment=\"${1|left,center,right|}\"",
        "description": [
            "{N} TextAlignment Attribute",
            "\n Values:",
            "ðŸŸ£left (default)",
            "ðŸŸ£center",
            "ðŸŸ£right",
            "\n Example:",
            "<Label textAlignment=\"center\"></Label>",
            "\n"
        ]
    },
    "{N} FontWeight Attribute": {
        "prefix": "fontWeight",
        "body": "fontWeight=\"${1|normal,bold,100,200,300,400,500,600,700,800,900|}\"",
        "description": [
            "{N} FontWeight Attribute",
            "(NOTE: Some fonts do not support all available variants)",
            "\n Values:",
            "ðŸŸ£normal (default)",
            "ðŸŸ£bold",
            "ðŸŸ£100",
            "ðŸŸ£200",
            "ðŸŸ£300",
            "ðŸŸ£400 (normal)",
            "ðŸŸ£500",
            "ðŸŸ£600",
            "ðŸŸ£700 (bold)",
            "ðŸŸ£800",
            "ðŸŸ£900",
            "\n Example:",
            "<Label fontWeight=\"300\"></Label>",
            "\n"
        ]
    },
    "{N} FontStyle Attribute": {
        "prefix": "fontStyle",
        "body": "fontStyle=\"${1|normal,italic|}\"",
        "description": [
            "{N} FontStyle Attribute",
            "\n Values:",
            "ðŸŸ£normal (default)",
            "ðŸŸ£italic",
            "\n Example:",
            "<Label fontStyle=\"italic\"></Label>",
            "\n"
        ]
    },
    "{N} AutocapitalizationType Attribute": {
        "prefix": "autocapitalizationType",
        "body": "autocapitalizationType=\"${1|none,words,sentences,allCharacters|}\"",
        "description": [
            "{N} AutocapitalizationType Attribute",
            // "Auto-capitalization style for a text input.",
            "(NOTE: Text input only)",
            "\n Values:",
            // "ðŸŸ£sentences (default) - Capitalize the first letter of each sentence.",
            // "ðŸŸ£words - Capitalize the first letter of each word.",
            // "ðŸŸ£allCharacters - Capitalize all characters.",
            // "ðŸŸ£none",
            "ðŸŸ£sentences (default)",
            "ðŸŸ£words",
            "ðŸŸ£allCharacters",
            "ðŸŸ£none",
            "\n Example:",
            "<TextField autocapitalizationType=\"words\"></TextField>",
            "\n"
        ]
    },
    "{N} Orientation Attribute": {
        "prefix": "orientation",
        "body": "orientation=\"${1|vertical,horizontal|}\"",
        "description": [
            "{N} Orientation Attribute",
            "\n Values:",
            "ðŸŸ£vertical (default)",
            "ðŸŸ£horizontal",
            "\n Example:",
            "<StackLayout orientation=\"vertical\"></StackLayout>",
            "\n"
        ]
    },
    "{N} TabTextColor Attribute": {
        "prefix": "tabTextColor",
        "body": "tabTextColor=\"${1}\"",
        "description": [
            "{N} TabTextColor Attribute",
            "Sets the text color of the tabs titles.",
            "\n Values:",
            // "ðŸŸ£color (gray)",
            // "ðŸŸ£hex (#FF0000)",
            // "ðŸŸ£rgb (rgb(200,100,200)",
            // "ðŸŸ£rgba rgba(200,100,200, 0.5)",
            "ðŸŸ£color name",
            "ðŸŸ£hex",
            "ðŸŸ£rgb",
            "ðŸŸ£rgba",
            "\n Example:",
            "<TabView tabTextColor=\"gray\">",
            "\n"
        ]
    },
    "{N} SelectedTabTextColor Attribute": {
        "prefix": "selectedTabTextColor",
        "body": "selectedTabTextColor=\"${1}\"",
        "description": [
            "{N} SelectedTabTextColor Attribute",
            "\n Values:",
            // "ðŸŸ£color (gray)",
            // "ðŸŸ£hex (#FF0000)",
            // "ðŸŸ£rgb (rgb(200,100,200)",
            // "ðŸŸ£rgba rgba(200,100,200, 0.5)",
            "ðŸŸ£color name",
            "ðŸŸ£hex",
            "ðŸŸ£rgb",
            "ðŸŸ£rgba",
            "\n Example:",
            "<TabView selectedTabTextColor=\"gray\">",
            "\n"
        ]
    },
    "{N} TabBackgroundColor Attribute": {
        "prefix": "tabBackgroundColor",
        "body": "tabBackgroundColor=\"${1}\"",
        "description": [
            "{N} TabBackgroundColor Attribute",
            "\n Values:",
            // "ðŸŸ£color (gray)",
            // "ðŸŸ£hex (#FF0000)",
            // "ðŸŸ£rgb (rgb(200,100,200)",
            "ðŸŸ£color name",
            "ðŸŸ£hex",
            "ðŸŸ£rgb",
            "\n Example:",
            "<TabView tabBackgroundColor=\"gray\">",
            "\n"
        ]
    },
    "{N} ReturnKeyType Attribute": {
        "prefix": "returnKeyType",
        "body": "returnKeyType=\"${1|done,next,go,search,send|}\"",
        "description": [
            "{N} ReturnKeyType Attribute",
            "Keyboard return key text.",
            "\n Values:",
            "ðŸŸ£done",
            "ðŸŸ£next",
            "ðŸŸ£go",
            "ðŸŸ£search",
            "ðŸŸ£send",
            "\n Example:",
            "<TextField returnKeyType=\"done\"></returnKeyType>",
            "\n"
        ]
    }
}