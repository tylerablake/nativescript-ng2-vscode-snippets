{
    // Action Bar
    "{N} Action Bar": {
        "prefix": "nsactionbar",
        "body": [
            "<ActionBar title=\"Title\" class=\"action-bar\">",
            "</ActionBar>"
        ],
        "description": [
            "ActionBar Properties:",
            "- title:string - Gets or sets the action bar title.",
            "\n - titleView:View - Gets or sets the title view. When set replaces the title with a custom view",
            "\n"
        ]
    },
    "{N} Action Bar with Action Items": {
        "prefix": "nsactionbaritems",
        "body": [
            "<ActionBar title=\"Title\" class=\"action-bar\">",
            "  <ActionItem (tap)=\"\">",
            "    <Button text=\"Left\" class=\"action-item\"></Button>",
            "  </ActionItem>",
            "  <ActionItem (tap)=\"\" ios.position=\"right\">",
            "    <Button text=\"Right\" class=\"action-item\"></Button>",
            "  </ActionItem>",
            "</ActionBar>"
        ]
    },
    "{N} Action Item": {
        "prefix": "nsactionitem",
        "body": [
            "<ActionItem (tap)=\"\">",
            "  <Button text=\"Left\" class=\"action-item\"></Button>",
            "</ActionItem>"
        ],
        "description": [
            "ActionItem Properties:",
            "- text:string - Gets or sets the text of the action item",
            "\n - icon:string - Gets or sets the icon of the action item. Supports local images (~/), resources (res://) and icon fonts (fonts://)",
            "\n - ios.position:enum(left|right) - Sets the position of the item (default value is left)",
            "\n - android.position:enum(actionBar|popup|actionBarIfRoom) - Sets the position of the item (default value is actionBar)",
            "\n - ios.systemIcon:number - Sets the icon of the action item while using UIBarButtonSystemIcon enumeration",
            "\n - android.systemIcon:number - Sets a path to a resource icon ( see the list of Android system drawables)",
            "\n"
        ]
    },
    "{N} Action Item on the Right": {
        "prefix": "nsactionitemright",
        "body": [
            "<ActionItem (tap)=\"\" ios.position=\"right\">",
            "  <Button text=\"Right\" class=\"action-item\"></Button>",
            "</ActionItem>"
        ],
        "description": [
            "Create an ActionItem with ios.position=\"right\"",
            "\n ActionItem Properties:",
            "- text:string - Gets or sets the text of the action item",
            "\n - icon:string - Gets or sets the icon of the action item. Supports local images (~/), resources (res://) and icon fonts (fonts://)",
            "\n - ios.position:enum(left|right) - Sets the position of the item (default value is left)",
            "\n - android.position:enum(actionBar|popup|actionBarIfRoom) - Sets the position of the item (default value is actionBar)",
            "\n - ios.systemIcon:number - Sets the icon of the action item while using UIBarButtonSystemIcon enumeration",
            "\n - android.systemIcon:number - Sets a path to a resource icon ( see the list of Android system drawables)",
            "\n"
        ]
    },
    "{N} Action Bar with Back": {
        "prefix": "nsactionbarback",
        "body": [
            "<ActionBar title=\"Title\" class=\"action-bar\">",
            "  <NavigationButton text=\"Back\" android.systemIcon=\"ic_menu_back\"></NavigationButton>",
            "</ActionBar>"
        ],
        "description": [
            "Creates an ActionBar with a back button",
            "\n"
        ]
    },
    "{N} Navigation Button": {
        "prefix": "nsactionbarnavbtn",
        "body": [
            "<NavigationButton text=\"Back\" android.systemIcon=\"ic_menu_back\"></NavigationButton>"
        ],
        "description": [
            "Creates a NavigationButton",            
            "\n NavigationButton Properties:",
            "- text:string - Gets or sets the text of the action item.",
            "- icon:string - Gets or sets the icon of the action item",
            "\n"
        ]
    },
    "{N} Action Bar with Custom Title": {
        "prefix": "nsactionbarcustomtitle",
        "body": [
            "<ActionBar class=\"action-bar\">",
            "  <StackLayout orientation=\"horizontal\"",
            "    ios:horizontalAlignment=\"center\"",
            "    android:horizontalAlignment=\"left\">",
            "    <Label text=\"$1\" class=\"action-title\"></Label>",
            "  </StackLayout>",
            "  <ActionItem (tap)=\"$2\" ios.position=\"right\">",
            "    <Button text=\"Right\" class=\"action-item\"></Button>",
            "  </ActionItem>",
            "</ActionBar>"
        ],
        "description": [
            "Creates an ActionBar with a custom title",
            "\n"
        ]
    },


    // Platform Specific ActionBar Attributes
    "{N} iOS Icon Rendering Mode": {
        "prefix": "iosIconRenderingMode",
        "body": "iosIconRenderingMode=\"${1|alwaysOriginal,alwaysTemplate,automatic|}\"",
        "description": [
            "Gets or set the UIImageRenderingMode of the action bar icons in iOS.",
            "\n Example:",
            "<ActionBar iosIconRenderingMode=\"alwaysOriginal\"></ActionBar>",
            "\n Values:",
            "- alwaysOriginal (default)",
            "- alwaysTemplate",
            "- automatic",
            "\n"
        ]
    },
    "{N} iOS Icon Overflow Safe Area": {
        "prefix": "iosOverflowSafeArea",
        "body": "iosOverflowSafeArea=\"${1|false,true|}\"",
        "description": [
            "Instruct container view to expand beyond the safe area on iOS.",
            "\n Example:",
            "<ActionBar iosOverflowSafeArea=\"false\"></ActionBar>",
            "\n Values:",
            "- false (default)",
            "- true",
            "\n"
        ]
    },
    "{N} iOS Icon Overflow Safe Area Enabled": {
        "prefix": "iosOverflowSafeAreaEnabled",
        "body": "iosOverflowSafeAreaEnabled=\"${1|true,false|}\"",
        "description": [
            "Enables or disables the iosOverflowSafeArea property for all children on iOS.",
            "\n Example:",
            "<ActionBar iosOverflowSafeAreaEnabled=\"true\"></ActionBar>",
            "\n Values:",
            "- true (default)",
            "- false",
            "\n"
        ]
    },
    "{N} iOS ActionItem Position": {
        "prefix": "ios.position",
        "body": "ios.position=\"${1|left,right|}\"",
        "description": [
            "Sets the position of the ActionItem on iOS.",
            "\n Example:",
            "<ActionItem ios.position=\"left\"></ActionItem>",
            "\n Values:",
            "- left (default)",
            "- right",
            "\n"
        ]
    },
    "{N} Android ActionItem Position": {
        "prefix": "android.position",
        "body": "android.position=\"${1|actionBar,popup,actionBarIfRoom|}\"",
        "description": [
            "Sets the position of the ActionItem on Android.",
            "\n Example:",
            "<ActionItem android.position=\"actionBar\"></ActionItem>",
            "\n Values:",
            "- actionBar (default)",
            "- popup",
            "- actionBarIfRoom",
            "\n"
        ]
    },
    "{N} iOS ActionItem SystemIcon": {
        "prefix": "ios.systemIcon",
        "body": "ios.systemIcon=\"${1|0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23|}\"",
        "description": [
            "Sets the icon of the action item while using UIBarButtonSystemIcon enumeration.",
            "\n Example:",
            "<ActionItem ios.systemIcon=\"1\"></ActionItem>",
            "\n Values:",
            "- Action - 9",
            "- Add - 4",
            "- Bookmarks - 11",
            "- Camera - 15",
            "- Cancel - 1",
            "- Compose - 7",
            "- Done - 0",
            "- Edit - 1",
            "- FastForward - 20",
            "- FixedSpace - 6",
            "- FlexibleSpace - 5",
            "- Organize - 10",
            "- PageCurl - 23",
            "- Pause - 18",
            "- Play - 17",
            "- Redo - 22",
            "- Refresh - 13",
            "- Reply - 8",
            "- Rewind - 19",
            "- Save - 3",
            "- Search - 12",
            "- Stop - 14",
            "- Trash - 16",
            "- Undo - 21",
            "\n"
        ]
    },
    "{N} Android ActionItem SystemIcon": {
        "prefix": "android.systemIcon",
        "body": "android.systemIcon=\"${1}\"",
        "description": [
            "Sets the icon of the action item while using Android Drawables.",
            "\n Example:",
            "<ActionItem android.systemIcon=\"ic_menu_add\"></ActionItem>",
            "\n Values:",
            "Visit https://developer.android.com/reference/android/R.drawable.html to see supported values.",
            "\n"
        ]
    },    


    // Layouts
    "{N} Flexbox Layout": {
        "prefix": "nsflexbox",
        "body": [
            "<FlexboxLayout>",
            "    $1",
            "</FlexboxLayout>"
        ]
    },
    "{N} Flexbox Layout Column": {
        "prefix": "nsflexbox_column",
        "body": [
            "<FlexboxLayout flexDirection=\"column\">",
            "    $1",
            "</FlexboxLayout>"
        ]
    },
    "{N} Stack Layout": {
        "prefix": "nsstack",
        "body": [            
            "<StackLayout>",
            "    $1",
            "</StackLayout>"
        ],
        "description": [
            "A Layout that arranges its children horizontally or vertically. The direction can be set by orientation property.",            
            "\n StackLayout Properties:",
            "- orientation:string - Gets or sets a value indicating whether the child items should be stacked in the horizontal or vertical direction.",
            "Possible values are vertical and horizontal.",
            "The default value is vertical.",
            "\n StackLayout Events:",
            "- loaded - Emitted when the view is loaded.",
            "- unloaded - Emitted when the view is unloaded.",
            "- layoutChanged - Emitted when the layout bounds of a view changes.",                                 
            "\n"
        ]
    },
    "{N} Stack Layout Horizontal": {
        "prefix": "nsstack_horizontal",
        "body": [
            "<StackLayout orientation=\"horizontal\">",
            "    $1",
            "</StackLayout>"
        ]
    },
    "{N} Wrap Layout": {
        "prefix": "nswrap",
        "body": [
            "<WrapLayout orientation=\"horizontal\" itemWidth=\"$1\" itemHeight=\"$2\">",
            "    $3",
            "</WrapLayout>"
        ]
    },
    "{N} Absolute Layout": {
        "prefix": "nsabsolute",
        "body": [
            "<AbsoluteLayout>",
            "    <Label text=\"This is Label 1\" top=\"\" left=\"\"></Label>",            
            "</AbsoluteLayout>"
        ],
        "description": [
            "AbsoluteLayout Properties: None",            
            "\n AbsoluteLayout Child Properties:",
            "- top:number - Distance in pixels, between the top edge of the child and the top edge of its parent AbsoluteLayout container.",
            "- left:number - Distance in pixels, between the left edge of the child and the left edge of its parent AbsoluteLayout container.",            
            "\n AbsoluteLayout Events:",
            "- loaded - Emitted when the view is loaded.",
            "- unloaded - Emitted when the view is unloaded.",
            "- layoutChanged - Emitted when the layout bounds of a view changes.",            
            "\n"
        ]
    },
    "{N} Dock Layout": {
        "prefix": "nsdock",
        "body": [
            "<DockLayout stretchLastChild=\"true\">",
            "    <Label dock=\"top\" text=\"I am on top!\"></Label>",
            "</DockLayout>"
        ],
        "description": [
            "DockLayout Properties:",
            "- stretchLastChild:boolean - Gets or sets a value that indicates whether the last child element within a DockLayout stretches to fill the remaining available space.",
            "The default value is true.",            
            "\n DockLayout Events:",
            "- loaded - Emitted when the view is loaded.",
            "- unloaded - Emitted when the view is unloaded.",
            "- layoutChanged - Emitted when the layout bounds of a view changes.",            
            "\n"
        ]
    },
    "{N} Grid Layout": {
        "prefix": "nsgrid",
        "body": [
            "<GridLayout rows=\"$1\" columns=\"$2\">",
            "    $3",
            "</GridLayout>"
        ],
        "description": [
            "Creates a GridLayout container. Each value in columns list is a new column. Same with rows.",
            "\n Example:",
            "<GridLayout columns=\"*,auto,20\" rows=\"*,auto,20\">",            
            "</GridLayout>",
            "\n Columns & Rows Values:",
            "- * - Takes up the rest of available space",
            "- auto - Takes up only required space",
            "- explicit: number - Takes up space allocated. Can be any number.",                      
            "\n"
        ]
    },

    // Views
    "{N} Scroll View": {
        "prefix": "nsscrollview",
        "body": [
            "<ScrollView orientation=\"${1|vertical,horizontal|}\">",            
            "</ScrollView>"
        ],
        "description": [
            "ScrollView Properties:",
            "- orientation:Orientation - Gets or sets direction in which the content can be scrolled.",
            "Supported values are \"vertical\" (default) and \"horizontal\".",            
            "\n ScrollView Events:",
            "- scroll - Emitted when the component is scrolled.",                      
            "\n Native Components:",
            "- iOS - NativeScript specific implementation",
            "- Android - NativeScript specific implementation",            
            "\n"
        ]
    },
    "{N} List View": {
        "prefix": "nslistview",
        "body": [
            "<ListView [items]=\"source\" (loaded)=\"onLoaded($event)\" (itemLoading)=\"onItemLoading($event)\" (itemTap)=\"onItemTap($event)\" class=\"list-group\" separatorColor=\"#E5E5EA\">",
            "    <ng-template let-item=\"item\" let-odd=\"odd\" let-even=\"even\">",
            "      <StackLayout>",
            "        <Label [text]=\"item.title\" class=\"list-group-item\"></Label>",
            "        $1",
            "      </StackLayout>",
            "    </ng-template>",
            "</ListView>"
        ],
        "description": [
            "ListView Properties:",
            "- text:string - Gets or sets the text of the action item",
            "\n - items:Array<any> | ItemsSource - Gets or set the items collection of the ListView. The items property can be set to an array or an object defining length and getItem(index) method.",
            "\n - itemTemplateSelector:function - A function that returns the appropriate ket template based on the data item.",
            "\n - itemTemplates:Array<KeyedTemplate> - Gets or set the list of item templates for the item template selector.",
            "\n - separatorColor:string | Color - Gets or set the items separator line color of the ListView.",
            "\n - rowHeight:Length - Gets or set row height of the ListView.",
            "\n - iosEstimatedRowHeight:Length - Gets or set the estimated height of rows in the ListView. Default value: 44px",            
            "\n ListView Methods:",
            "- refresh() - Forces the ListView to reload all its items.",
            "\n - scrollToIndex(index: number) - Scrolls the specified item with index into view.",
            "\n - scrollToIndexAnimated(index: number) - Scrolls the specified item with index into view with animation.",
            "\n - isItemAtIndexVisible(index: number): boolean - Checks if specified item with index is visible.",                        
            "\n ListView Events:",
            "- itemLoading - Emitted when a View for the data at the specified index should be created.",
            "\n - itemTap - Emitted when a ListView item is tapped.",
            "\n - loadMoreItems - Emitted when the ListView is scrolled so that its last item is visible.",                        
            "\n Native Components:",
            "- iOS - UITableView",
            "- Android - android.widget.ListView",            
            "\n"
        ]
    },
    "{N} Tab View": {
        "prefix": "nstabview",
        "body": [
            "<TabView selectedTabTextColor=\"black\" tabTextColor=\"gray\" tabBackgroundColor=\"lightgray\" androidSelectedTabHighlightColor=\"black\">",
            "<StackLayout *tabItem=\"{title: 'First Tab', iconSource: 'res://icon', textTransform: 'lowercase'}\" >",
                "<Label text=\"Tab 1 Content\"></Label>",
            "</StackLayout>",
            "<StackLayout *tabItem=\"{title: 'Second Tab', iconSource: 'res://icon', textTransform: 'lowercase'}\" >",
                "<Label text=\"Tab 2 Content\"></Label>",
            "</StackLayout>",
            "</TabView>"            
        ],
        "description": [
            "TabView Properties:",
            "- androidOffscreenTabLimit:number - Gets or sets the number of tabs that should be retained to either side of the current tab in the view hierarchy in an idle state.",
            "\n - androidSelectedTabHighlightColor:Color - Gets or sets the color of the horizontal line drawn below the currently selected tab on Android.",
            "\n - iosIconRenderingMode:Enum - Gets or sets the icon rendering mode on iOS.",
            "\n - items:Array<TabViewItem> - Gets or sets the items of the TabView.",
            "\n - selectedIndex:number - Gets or sets the selectedIndex of the TabView.",
            "\n - selectedTabTextColor:Color - Gets or sets the text color of the selected tab title.",
            "\n - tabBackgroundColor:Color - Gets or sets the background color of the tabs.",
            "\n - tabTextColor:Color - Gets or sets the font size of the tabs titles.",
            "\n - tabTextFontSize:number - Gets or sets the font size of the tabs titles.",            
            "\n TabView Methods:",
            "- refresh() - Forces the ListView to reload all its items.",
            "\n - scrollToIndex(index: number) - Scrolls the specified item with index into view.",
            "\n - scrollToIndexAnimated(index: number) - Scrolls the specified item with index into view with animation.",
            "\n - isItemAtIndexVisible(index: number): boolean - Checks if specified item with index is visible.",                        
            "\n TabView Events:",
            "- selectedIndexChanged - Emitted when the selectedIndex property is changed.",
            "- loaded - Emitted when the view is loaded.",
            "- unloaded - Emitted when the view is unloaded.",
            "- layoutChanged - Emitted when the layout bounds of a view changes.",            
            "\n Native Components:",
            "- iOS - UITabBarController",
            "- Android - androidx.viewpager.widget.ViewPager",            
            "\n"
        ]
    },
    "{N} Web View": {
        "prefix": "nswebview",
        "body": [            
            "<WebView src\"${1}\" (loaded)=\"onWebViewLoaded()\"  (touch)=\"webViewTouch()\" (pan)=\"webViewPan()\"></WebView>"       
        ],
        "description": [
            "WebView Properties:",
            "- src:string - Gets or sets the src.",
            "Supports url, local file path,or HTML string.",            
            "\n WebView Methods:",
            "- reload(): void - Reloads the WebView forcing updating of the content.",            
            "\n WebView Events:",
            "- loadStarted - Emitted when the content is starting to load.",
            "- loadFinished - Emitted when the content loading is over.",
            "- touch - Emitted when the content is touched.",
            "- pan - Emitted when the content is panned.",            
            "\n Native Components:",
            "- iOS - WKWebView",
            "- Android - android.webkit.WebView",            
            "\n"
        ]
    },


    // Widgets
    
    "{N} Image": {
        "prefix": "nsimg",
        "body": "<Image src=\"${1|http://,res://,~/,fonts://|}\"></Image>",
        "description": [
            "Shows an image.",
            "\n Example:",
            "<Image src=\"res://logo_white_bg\"></Image>",
            "\n Supports:",
            "- http:// (url)",
            "- res:// (resources)",
            "- ~/ (local images)",
            "- fonts:// (fonts)",
            "\n"
        ]
    },
    "{N} Label": {
        "prefix": "nslabel",
        "body": [
            "<Label text=\"$1\" textWrap=\"true\"></Label>",
            "$2"
        ]
    },
    "{N} Button": {
        "prefix": "nsbtn",
        "body": [
            "<Button text=\"$1\" (tap)=\"$2\"></Button>",
            "$3"
        ]
    },
    "{N} Text Field": {
        "prefix": "nstextfield",
        "body": [
            "<TextField hint=\"$1\" text=\"$2\"></TextField>",
            "$3"
        ]
    },
    "{N} Password Field": {
        "prefix": "nspassword",
        "body": [
            "<TextField hint=\"Enter your password.\" text=\"$1\" secure=\"true\"></TextField>",
            "$2"
        ]
    },
    "{N} Editable TextView": {
        "prefix": "nstextview_editable",
        "body": [
            "<TextView hint=\"$1\" text=\"$2\" editable=\"true\"></TextView>",
            "$3"
        ]
    },
    "{N} Non-Editable TextView": {
        "prefix": "nstextview_non-editable",
        "body": [
            "<TextView text=\"$1\" editable=\"false\"></TextView>",
            "$2"
        ]
    },
    "{N} SearchBar": {
        "prefix": "nssearchbar",
        "body": [
            "<SearchBar id=\"${1:searchBar}\" hint=\"${2:Search}\" text=\"$3\" (clear)=\"${4:onClear}\" (submit)=\"${5:onSubmit}\" class=\"search-bar\"></SearchBar>",
            "$6"
        ]
    },
    "{N} Switch": {
        "prefix": "nsswitch",
        "body": [
            "<Switch [checked]=\"$1\" class=\"switch\"></Switch>",
            "$2"
        ]
    },
    "{N} Progress Bar": {
        "prefix": "nsprogress",
        "body": [
            "<Progress [value]=\"$1\" [maxValue]=\"$2\" (valueChanged)=\"onValueChanged($event)\" class=\"progress\"></Progress>"            
        ],
        "description": [
            "Progress Properties:",
            "- value:number - Gets or sets a progress current value.",
            "\n - maxValue:number - Gets or sets a progress max value.",                        
            "\n Progress Events:",
            "- valueChange - Emitted when the value is changed.",                      
            "\n Native Components:",
            "- iOS - UIProgressView",
            "- Android - android.widget.ProgressBar",            
            "\n"
        ]
    },
    "{N} Slider": {
        "prefix": "nsslider",
        "body": [
            "<Slider [minValue]=\"$1\" [maxValue]=\"$2\" [value]=\"$3\" class=\"slider\"></Slider>",
            "$4"
        ]
    },
    "{N} Date Picker": {
        "prefix": "nsdate",
        "body": [
            "<DatePicker [day]=\"$1\" [month]=\"$2\" [year]=\"$3\"></DatePicker>",
            "$4"
        ]
    },
    "{N} Time Picker": {
        "prefix": "nstime",
        "body": [
            "<TimePicker [hour]=\"$1\" [minute]=\"$2\"></TimePicker>",
            "$3"
        ]
    },
    "{N} List Picker": {
        "prefix": "nslistpicker",
        "body": [
            "<ListPicker [items]=\"$1\" [(ngModel)]=\"$2\"></ListPicker>"            
        ],
        "description": [
            "ListPicker Properties:",
            "- items:string - Gets or set the items collection of the ListPicker. The items property can be set to an array or an object defining length and getItem(index) method.",
            "\n - selectedIndex:number - Gets or set the index of the selected ListPicker item.",                
            "\n ListPicker Events:",
            "- selectedIndexChange - Emitted when the selectedIndex is changed.",                      
            "\n Native Components:",
            "- iOS - UIPickerView",
            "- Android - android.widget.NumberPicker",            
            "\n"
        ]
    },
    "{N} Activity Indicator": {
        "prefix": "nsloading",
        "body": [
            "<ActivityIndicator width=\"100\" height=\"100\" [busy]=\"$1\" (busyChange)=\"onBusyChanged($event)\" class=\"activity-indicator\"></ActivityIndicator>",
            "$2"
        ],
        "description": [
            "ActivityIndicator Properties:",
            "- busy:boolean - Gets or sets a value indicating whether the widget is currently displaying progress.",            
            "\n"
        ]
    },
    "{N} Segmented Bar": {
        "prefix": "nssegmentedbar",
        "body": [
            "<SegmentedBar [items]=\"$1\" [(ngModel)]=\"$2\">",
            "</SegmentedBar>"
        ]
    },    
    "{N} Border": {
        "prefix": "nsborder",
        "body": [
            "borderColor=\"${1|red,blue,green,orange,brown,black,yellow,white|}\" borderWidth=\"2\""            
        ],
        "description": [
            "Apply a colored border",
            "\n Tip: This is helpful for debugging layout issues. :)",
            "\n"
        ]
    },

    // Events
    "{N} Loaded Event": {
        "prefix": "nsloaded",
        "body": "(loaded)=\"$1\"",
        "description": [
            "Emitted when the view is loaded.",
            "\n"
        ]
    },
    "{N} Unloaded Event": {
        "prefix": "nsunloaded",
        "body": "(unloaded)=\"$1\"",
        "description": [
            "Emitted when the view is unloaded.",
            "\n"
        ]
    },
    "{N} LayoutChanged Event": {
        "prefix": "nslayoutChanged",
        "body": "(layoutChanged)=\"$1\"",
        "description": [
            "Emitted when the layout bounds of a view changes due to layout processing.",
            "\n"
        ]
    },
    "{N} BusyChanged Event": {
        "prefix": "nsbusychanged",
        "body": "(busyChanged)=\"$1\"",
        "description": [
            "Emitted when the ActivityIndicator busy property is changed.",
            "\n"
        ]
    },
    "{N} SelectedIndexChanged Event": {
        "prefix": "nsselectedindexchanged",
        "body": "(selectedIndexChanged)=\"$1\"",
        "description": [
            "Emitted when the selectedIndex property is changed.",
            "\n"
        ]
    },

    // Attributes
    "{N} CSS Class Attribute": {
        "prefix": "css",
        "body": "class=\"$1\"$2"
    },
    "{N} Text Attribute": {
        "prefix": "text",
        "body": "text=\"$1\"$2"
    },
    "{N} Text Binding Attribute": {
        "prefix": "textbinding",
        "body": "[text]=\"$1\"$2"
    },
    "{N} Icon Attribute": {
        "prefix": "icon",
        "body": "icon=\"${1|res://,~/,fonts://|}\"",
        "description": [
            "Gets or sets the icon of the action item",
            "\n Example:",
            "<ActionItem icon=\"res://ic_add\"></ActionItem>",
            "\n Supports:",
            "- res:// (resources)",
            "- ~/ (local images)",
            "- fonts:// (fonts)",
            "\n"
        ]
    },
    "{N} Tap Attribute": {
        "prefix": "tap",
        "body": "(tap)=\"$1\"$2"
    },
    "{N} Text Wrap Attribute": {
        "prefix": "wrap",
        "body": "textWrap=\"${1|true,false|}\"",
        "description": [
            "Gets or sets the text wrap.",
            "\n Example:",
            "<Label textWrap=\"false\"></Label>",
            "\n Values:",
            "- false (default)",
            "- true",
            "\n"
        ]
    },
    "{N} Horizontal Alignment Attribute": {
        "prefix": "halign",        
        "body": "horizontalAlignment=\"${1|center,left,right,stretch|}\"",
            "description": [
                "HorizontalAlignment indicates where an element should be displayed on the horizontal axis relative to the allocated layout slot of the parent element.",
                "\n Example:",
                "<Label horizontalAlignment=\"center\"></Label>",
                "\n Values:",
                "- stretch (default)",
                "- center",
                "- left",
                "- right",
                "\n"
            ]
    },
    "{N} Vertical Alignment Attribute": {
        "prefix": "valign",        
        "body": "verticalAlignment=\"${1|center,top,middle,bottom,stretch|}\"",
            "description": [
                "VerticalAlignment indicates where an element should be displayed on the horizontal axis relative to the allocated layout slot of the parent element.",
                "\n Example:",
                "<Label verticalAlignment=\"center\"></Label>",
                "\n Values:",
                "- stretch (default)",
                "- top",
                "- center",
                "- middle",
                "- bottom",
                "\n"
            ]
    },
    "{N} Visibility Attribute": {
        "prefix": "visibility",
        "body": "[visibility]=\"isItemVisible ? 'visible' : 'collapsed'\"$2"
    },
    "{N} Stretch Attribute": {
        "prefix": "stretch",
        "body": "stretch=\"${1|aspectFit,none,fill,aspectFill|}\"",
        "description": [
            "Gets or sets the image stretch mode.",
            "\n Example:",
            "<Image stretch=\"aspectFit\"></Image>",
            "\n Values:",
            "- aspectFit (default)",
            "- none",
            "- fill",
            "- aspectFill",
            "\n"
        ]
    },
    "{N} Keyboard Type Attribute": {
        "prefix": "kbtype",
        "body": "keyboardType=\"${1|number,email,phone,integer,datetime,url|}\"",
        "description": [
            "Gets or sets the keyboard type.",
            "\n Example:",
            "<TextField keyboardType=\"number\"></TextField>",
            "\n Values:",
            "- number",
            "- email",
            "- phone",
            "- integer",
            "- datetime",
            "- url",
            "\n"
        ]
    },
    "{N} Row Attribute": {
        "prefix": "row",
        "body": "row=\"$1\"$2"
    },
    "{N} Column Attribute": {
        "prefix": "col",
        "body": "col=\"$1\"$2"
    },
    "{N} Colspan Attribute": {
        "prefix": "colspan",
        "body": "colSpan=\"$1\"$2"
    },
    "{N} Rowspan Attribute": {
        "prefix": "rowspan",
        "body": "rowSpan=\"$1\"$2"
    },
    "{N} Width Attribute": {
        "prefix": "width",
        "body": "width=\"$1\"$2"
    },
    "{N} Height Attribute": {
        "prefix": "height",
        "body": "height=\"$1\"$2"
    },
    "{N} Dock Attribute": {
        "prefix": "dock",
        "body": "dock=\"${1|top,left,right,bottom|}\"",
        "description": [
            "Sets how the child view should dock to the parent DockLayout container.",
            "\n Example:",
            "<DockLayout>",
            "<Label dock=\"bottom\"></Label>",
            "</DockLayout>",
            "\n Values:",
            "- top",
            "- left",
            "- right",
            "- bottom",            
            "\n"
        ]
    },
    "{N} TextTransform Attribute": {
        "prefix": "textTransform",
        "body": "textTransform=\"${1|none,capitalize,uppercase,lowercase|}\"",
        "description": [
            "Sets how text should be transformed",
            "\n Example:",            
            "<Label textTransform=\"lowercase\"></Label>",            
            "\n Values:",
            "- none (default)",
            "- capitalize",
            "- uppercase",
            "- lowercase",            
            "\n"
        ]
    },
    "{N} TextDecoration Attribute": {
        "prefix": "textDecoration",
        "body": "textDecoration=\"${1|none,underline,line-through|}\"",
        "description": [
            "Sets how text should be decorated",
            "\n Example:",            
            "<Label textDecoration=\"underline\"></Label>",            
            "\n Values:",
            "- none (default)",
            "- underline",
            "- line-through",           
            "\n"
        ]
    },
    "{N} TextAlignment Attribute": {
        "prefix": "textAlignment",
        "body": "textAlignment=\"${1|left,center,right|}\"",
        "description": [
            "Sets how text should be aligned",
            "\n Example:",            
            "<Label textAlignment=\"center\"></Label>",            
            "\n Values:",
            "- left (default)",
            "- center",
            "- right",           
            "\n"
        ]
    },
    "{N} FontWeight Attribute": {
        "prefix": "fontWeight",
        "body": "fontWeight=\"${1|normal,bold,100,200,300,400,500,600,700,800,900|}\"",
        "description": [
            "Sets the font weight of the matched view.",
            "Possible values:",
            "bold|normal",
            "OR",
            "100|200|300|400|500|600|700|800|900.",
            "400 is normal and 700 is bold",
            "(NOTE: Some fonts do not support all available variants)",
            "\n Example:",            
            "<Label fontWeight=\"300\"></Label>",            
            "\n Values:",
            "- normal (default)",
            "- bold",
            "- 100",
            "- 200",
            "- 300",
            "- 400",
            "- 500",
            "- 600",
            "- 700",
            "- 800",
            "- 900",
            "\n"
        ]
    },
    "{N} FontStyle Attribute": {
        "prefix": "fontStyle",
        "body": "fontStyle=\"${1|normal,italic|}\"",
        "description": [
            "Sets how text should be styled",
            "\n Example:",            
            "<Label fontStyle=\"italic\"></Label>",            
            "\n Values:",
            "- normal (default)",
            "- italic",       
            "\n"
        ]
    },
    "{N} Orientation Attribute": {
        "prefix": "orientation",
        "body": "orientation=\"${1|vertical,horizontal|}\"",
        "description": [
            "Sets the orientation of the element",
            "\n Example:",            
            "<StackLayout orientation=\"vertical\"></StackLayout>",            
            "\n Values:",
            "- vertical (default)",
            "- horizontal",           
            "\n"
        ]
    },
    "{N} TabTextColor Attribute": {
        "prefix": "tabTextColor",
        "body": "tabTextColor=\"${1}\"",
        "description": [
            "Sets the text color of the tabs titles.",
            "\n Example:",            
            "<TabView tabTextColor=\"gray\">",            
            "\n Values:",
            "- color (gray)",
            "- hex (#FF0000)",
            "- rgb (rgb(200,100,200)",
            "- rgba rgba(200,100,200, 0.5)",
            "\n"
        ]
    },
    "{N} SelectedTabTextColor Attribute": {
        "prefix": "selectedTabTextColor",
        "body": "selectedTabTextColor=\"${1}\"",
        "description": [
            "Sets the color of the text, while selecting some of the tabs.",
            "\n Example:",            
            "<TabView selectedTabTextColor=\"gray\">",            
            "\n Values:",
            "- color (gray)",
            "- hex (#FF0000)",
            "- rgb (rgb(200,100,200)",
            "- rgba rgba(200,100,200, 0.5)",
            "\n"
        ]
    },
    "{N} TabBackgroundColor Attribute": {
        "prefix": "tabBackgroundColor",
        "body": "tabBackgroundColor=\"${1}\"",
        "description": [
            "Sets the background color of the tabs.",
            "\n Example:",            
            "<TabView tabBackgroundColor=\"gray\">",            
            "\n Values:",
            "- color (gray)",
            "- hex (#FF0000)",
            "- rgb (rgb(200,100,200)",           
            "\n"
        ]
    }
    
}